// <auto-generated />
using System;
using DeathStar;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DeathStar_Data.Migrations
{
    [DbContext(typeof(DeathStarContext))]
    partial class DeathStarContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DeathStar.HistoricoViagem", b =>
                {
                    b.Property<int>("ViagemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ViagemId"), 1L, 1);

                    b.Property<DateTime>("DtChegada")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DtSaida")
                        .HasColumnType("datetime2");

                    b.Property<int>("NavesNaveId")
                        .HasColumnType("int");

                    b.Property<int>("PilotosPilotoId")
                        .HasColumnType("int");

                    b.HasKey("ViagemId");

                    b.HasIndex("NavesNaveId");

                    b.HasIndex("PilotosPilotoId");

                    b.ToTable("HistoricoViagens");
                });

            modelBuilder.Entity("DeathStar.Nave", b =>
                {
                    b.Property<int>("NaveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NaveId"), 1L, 1);

                    b.Property<double>("Carga")
                        .HasColumnType("float");

                    b.Property<string>("Classe")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Passageiros")
                        .HasColumnType("int");

                    b.HasKey("NaveId");

                    b.ToTable("Naves");
                });

            modelBuilder.Entity("DeathStar.Piloto", b =>
                {
                    b.Property<int>("PilotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PilotoId"), 1L, 1);

                    b.Property<string>("AnoNascimento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlanetasId")
                        .HasColumnType("int");

                    b.HasKey("PilotoId");

                    b.HasIndex("PlanetasId");

                    b.ToTable("Pilotos");
                });

            modelBuilder.Entity("DeathStar.Planeta", b =>
                {
                    b.Property<int>("PlanetaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlanetaId"), 1L, 1);

                    b.Property<string>("Clima")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Diametro")
                        .HasColumnType("float");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Orbita")
                        .HasColumnType("float");

                    b.Property<int>("Populacao")
                        .HasColumnType("int");

                    b.Property<double>("Rotacao")
                        .HasColumnType("float");

                    b.HasKey("PlanetaId");

                    b.ToTable("Planetas");
                });

            modelBuilder.Entity("NavePiloto", b =>
                {
                    b.Property<int>("NavesNaveId")
                        .HasColumnType("int");

                    b.Property<int>("PilotosPilotoId")
                        .HasColumnType("int");

                    b.HasKey("NavesNaveId", "PilotosPilotoId");

                    b.HasIndex("PilotosPilotoId");

                    b.ToTable("NavePiloto");
                });

            modelBuilder.Entity("DeathStar.HistoricoViagem", b =>
                {
                    b.HasOne("DeathStar.Nave", "Naves")
                        .WithMany("HistoricoViagens")
                        .HasForeignKey("NavesNaveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeathStar.Piloto", "Pilotos")
                        .WithMany("HistoricoViagens")
                        .HasForeignKey("PilotosPilotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Naves");

                    b.Navigation("Pilotos");
                });

            modelBuilder.Entity("DeathStar.Piloto", b =>
                {
                    b.HasOne("DeathStar.Planeta", "Planetas")
                        .WithMany("Pilotos")
                        .HasForeignKey("PlanetasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Planetas");
                });

            modelBuilder.Entity("NavePiloto", b =>
                {
                    b.HasOne("DeathStar.Nave", null)
                        .WithMany()
                        .HasForeignKey("NavesNaveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeathStar.Piloto", null)
                        .WithMany()
                        .HasForeignKey("PilotosPilotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeathStar.Nave", b =>
                {
                    b.Navigation("HistoricoViagens");
                });

            modelBuilder.Entity("DeathStar.Piloto", b =>
                {
                    b.Navigation("HistoricoViagens");
                });

            modelBuilder.Entity("DeathStar.Planeta", b =>
                {
                    b.Navigation("Pilotos");
                });
#pragma warning restore 612, 618
        }
    }
}
